package com.example.dynamodb.demodynamooperations.configuration;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;

import java.net.URI;

@Configuration
public class DynamoLocalConfiguration {
    private static final StaticCredentialsProvider STATIC_CREDENTIALS = StaticCredentialsProvider.create(AwsBasicCredentials.create("none", "none"));

    @Bean
    @ConditionalOnMissingBean(DynamoDbClient.class)
    public DynamoDbClient dynamoDbClient() {
        return DynamoDbClient.builder()
                .credentialsProvider(STATIC_CREDENTIALS)
                .endpointOverride(URI.create("http://localhost:4566"))
                .region(Region.of("sa-east-1"))
                .build();
    }

    @Bean
    @ConditionalOnMissingBean(DynamoDbEnhancedClient.class)
    public DynamoDbEnhancedClient dynamoDbEnhancedClient(DynamoDbClient client) {
//        List<DynamoDbEnhancedClientExtension> extensions = List.of(AutoGeneratedTimestampRecordExtension.create());
        return DynamoDbEnhancedClient.builder()
                .dynamoDbClient(client)
//                .extensions(extensions)
                .build();
    }
}
